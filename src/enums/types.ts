/**
 * @file Enums - types
 * @module esast-util-from-code/enums/types
 */

import type { EsastNode } from '@flex-development/esast'
import type { Type } from '@flex-development/unist-util-types'

/**
 * esast node types.
 *
 * @enum {Type<EsastNode>}
 */
enum types {
  ambientDeclaration = 'ambientDeclaration',
  argumentList = 'argumentList',
  arithmeticExpression = 'arithmeticExpression',
  arrayExpression = 'arrayExpression',
  arrayPattern = 'arrayPattern',
  arrayType = 'arrayType',
  arrowFunctionExpression = 'arrowFunctionExpression',
  asClause = 'asClause',
  asExpression = 'asExpression',
  assertionPredicate = 'assertionPredicate',
  assignmentExpression = 'assignmentExpression',
  assignmentPattern = 'assignmentPattern',
  awaitExpression = 'awaitExpression',
  bigint = 'bigint',
  bitwiseExpression = 'bitwiseExpression',
  blockStatement = 'blockStatement',
  boolean = 'boolean',
  breakStatement = 'breakStatement',
  callExpression = 'callExpression',
  callSignature = 'callSignature',
  catchClause = 'catchClause',
  classBody = 'classBody',
  classDeclaration = 'classDeclaration',
  classExpression = 'classExpression',
  classHeritage = 'classHeritage',
  comment = 'comment',
  computedExpression = 'computedExpression',
  conditionalExpression = 'conditionalExpression',
  conditionalType = 'conditionalType',
  constructSignature = 'constructSignature',
  constructorType = 'constructorType',
  continueStatement = 'continueStatement',
  debuggerStatement = 'debuggerStatement',
  decorator = 'decorator',
  decoratorList = 'decoratorList',
  directive = 'directive',
  doWhileStatement = 'doWhileStatement',
  elseStatement = 'elseStatement',
  emptyStatement = 'emptyStatement',
  enumBody = 'enumBody',
  enumDeclaration = 'enumDeclaration',
  enumMember = 'enumMember',
  equalityExpression = 'equalityExpression',
  exportDeclaration = 'exportDeclaration',
  exportSpecifier = 'exportSpecifier',
  exportSpecifiers = 'exportSpecifiers',
  expressionStatement = 'expressionStatement',
  extendsClause = 'extendsClause',
  fieldDefinition = 'fieldDefinition',
  finallyBlock = 'finallyBlock',
  forInStatement = 'forInStatement',
  forOfStatement = 'forOfStatement',
  forStatement = 'forStatement',
  fromClause = 'fromClause',
  functionDeclaration = 'functionDeclaration',
  functionExpression = 'functionExpression',
  functionSignature = 'functionSignature',
  functionType = 'functionType',
  genericType = 'genericType',
  identifier = 'identifier',
  ifStatement = 'ifStatement',
  implementsClause = 'implementsClause',
  importAssertion = 'importAssertion',
  importAttribute = 'importAttribute',
  importDeclaration = 'importDeclaration',
  importExpression = 'importExpression',
  importMeta = 'importMeta',
  importSpecifier = 'importSpecifier',
  importSpecifiers = 'importSpecifiers',
  indexSignature = 'indexSignature',
  indexedAccessType = 'indexedAccessType',
  inferType = 'inferType',
  interfaceBody = 'interfaceBody',
  interfaceDeclaration = 'interfaceDeclaration',
  intersectionType = 'intersectionType',
  labeledStatement = 'labeledStatement',
  logicalExpression = 'logicalExpression',
  mappedSignature = 'mappedSignature',
  mappedType = 'mappedType',
  memberExpression = 'memberExpression',
  methodDefinition = 'methodDefinition',
  methodSignature = 'methodSignature',
  modifier = 'modifier',
  modifierList = 'modifierList',
  moduleBody = 'moduleBody',
  moduleDeclaration = 'moduleDeclaration',
  moduleExpression = 'moduleExpression',
  namespaceDeclaration = 'namespaceDeclaration',
  namespaceExport = 'namespaceExport',
  namespaceImport = 'namespaceImport',
  newExpression = 'newExpression',
  nonNullExpression = 'nonNullExpression',
  nothing = 'nothing',
  null = 'null',
  number = 'number',
  objectExpression = 'objectExpression',
  objectLiteralType = 'objectLiteralType',
  objectPattern = 'objectPattern',
  parameter = 'parameter',
  parameterList = 'parameterList',
  parenthesizedExpression = 'parenthesizedExpression',
  parenthesizedType = 'parenthesizedType',
  property = 'property',
  propertySignature = 'propertySignature',
  regexp = 'regexp',
  relationalExpression = 'relationalExpression',
  restElement = 'restElement',
  restType = 'restType',
  returnStatement = 'returnStatement',
  root = 'root',
  satisfiesClause = 'satisfiesClause',
  satisfiesExpression = 'satisfiesExpression',
  sequenceExpression = 'sequenceExpression',
  spreadElement = 'spreadElement',
  staticBlock = 'staticBlock',
  staticBlockBody = 'staticBlockBody',
  string = 'string',
  super = 'super',
  switchBody = 'switchBody',
  switchCase = 'switchCase',
  switchStatement = 'switchStatement',
  taggedTemplateExpression = 'taggedTemplateExpression',
  templateElement = 'templateElement',
  templateLiteral = 'templateLiteral',
  templatePlaceholder = 'templatePlaceholder',
  this = 'this',
  throwStatement = 'throwStatement',
  tryStatement = 'tryStatement',
  tupleElement = 'tupleElement',
  tupleType = 'tupleType',
  typeAliasDeclaration = 'typeAliasDeclaration',
  typeAnnotation = 'typeAnnotation',
  typeArgumentList = 'typeArgumentList',
  typeAssertion = 'typeAssertion',
  typeAssertionExpression = 'typeAssertionExpression',
  typeKeyword = 'typeKeyword',
  typeParameter = 'typeParameter',
  typeParameterList = 'typeParameterList',
  typePredicate = 'typePredicate',
  unaryExpression = 'unaryExpression',
  unaryTypeExpression = 'unaryTypeExpression',
  undefined = 'undefined',
  unionType = 'unionType',
  updateExpression = 'updateExpression',
  variableDeclaration = 'variableDeclaration',
  variableDeclarator = 'variableDeclarator',
  whileStatement = 'whileStatement',
  withStatement = 'withStatement',
  yieldExpression = 'yieldExpression'
}

export default types
